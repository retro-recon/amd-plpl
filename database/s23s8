"Simulation database AmPAL23S8"
BEGIN_DEF
6234 26 20 46
DEFINE
begin
_zener = 2,3,4,5,6,7,8,9;
_input = 0,1,_zener,X,N,Z,F;
_clock = C,K,P,B,F,_input;
_clk_input = _input,_clock;
_output = H,L,X,N,Z,F;
_io    = _input,_output;
_power = N;
end; "DEFINE"

EQ
begin
eq1(46,1) = 2*/2*&fd19*/&fd19*3*/3*&fd18*/&fd18*
            4*/4*&fd26*/&fd26*5*/5*17*/17*
            6*/6*&fd25*/&fd25*16*/16*&fd24*/&fd24*&fd23*/&fd23*
            15*/15*7*/7*&fd22*/&fd22*8*/8*14*/14*
            9*/9*&fd21*/&fd21*11*/11*&fd13*/&fd13*&fd12*/&fd12;
end;  "EQ"
NODE
begin
fd12 = !6233 : 0 > 12 reg_feedback < (/12.Q)
             : 1 > 12 io_feedback  < ( 12  );
fd13 = !6229 : 0 > 13 reg_feedback < (/13.Q)
             : 1 > 13 io_feedback  < ( 13  );
fd18 = !6217 : 0 > 18 reg_feedback < (/18.Q)
             : 1 > 18 io_feedback  < ( 18  );
fd19 = !6213 : 0 > 19 reg_feedback < (/19.Q)
             : 1 > 19 io_feedback  < ( 19  );
fd21 = /21.Q;
fd22 = /22.Q;
fd23 = /23.Q;
fd24 = /24.Q;
fd25 = /25.Q;
fd26 = /26.Q;

"EQTYPE specifies the equation format to use; the number
 specifies the starting fuse address to form the equation"
p19_oe = eqtype(eq1)  : 0;   "output enable for 19"
p19_0  = eqtype(eq1)  : 46;
p19_1  = eqtype(eq1)  : 92;
p19_2  = eqtype(eq1)  : 138;
p19_3  = eqtype(eq1)  : 184;
p19_4  = eqtype(eq1)  : 230;
p19_5  = eqtype(eq1)  : 276;
p19_6  = eqtype(eq1)  : 322;
p19_7  = eqtype(eq1)  : 368;

p18_oe = eqtype(eq1)  : 414;  "output enable for 18"
p18_0 = eqtype(eq1)  : 460;
p18_1 = eqtype(eq1)  : 506;
p18_2 = eqtype(eq1)  : 552;
p18_3 = eqtype(eq1)  : 598;
p18_4 = eqtype(eq1)  : 644;
p18_5 = eqtype(eq1)  : 690;
p18_6 = eqtype(eq1)  : 736;
p18_7 = eqtype(eq1)  : 782;
p18_8 = eqtype(eq1)  : 828;
p18_9 = eqtype(eq1)  : 874;

p26_0 = eqtype(eq1)  : 920;  "internal reg 26"
p26_1 = eqtype(eq1)  : 966;
p26_2 = eqtype(eq1)  : 1012;
p26_3 = eqtype(eq1)  : 1058;
p26_4 = eqtype(eq1)  : 1104;
p26_5 = eqtype(eq1)  : 1150;

p17_oe = eqtype(eq1)  : 1196; "output enable for 17"
p17_0 = eqtype(eq1)  : 1242;
p17_1 = eqtype(eq1)  : 1288;
p17_2 = eqtype(eq1)  : 1334;
p17_3 = eqtype(eq1)  : 1380;
p17_4 = eqtype(eq1)  : 1426;
p17_5 = eqtype(eq1)  : 1472;
p17_6 = eqtype(eq1)  : 1518;
p17_7 = eqtype(eq1)  : 1564;

p25_0 = eqtype(eq1)  : 1610;  "internal reg 25"
p25_1 = eqtype(eq1)  : 1656;
p25_2 = eqtype(eq1)  : 1702;
p25_3 = eqtype(eq1)  : 1748;
p25_4 = eqtype(eq1)  : 1794;
p25_5 = eqtype(eq1)  : 1840;
p25_6 = eqtype(eq1)  : 1886;
p25_7 = eqtype(eq1)  : 1932;

p16_oe = eqtype(eq1)  : 1978; "output enable for 16"
p16_0  = eqtype(eq1)  : 2024;
p16_1  = eqtype(eq1)  : 2070;
p16_2  = eqtype(eq1)  : 2116;
p16_3  = eqtype(eq1)  : 2162;
p16_4  = eqtype(eq1)  : 2208;
p16_5  = eqtype(eq1)  : 2254;
p16_6  = eqtype(eq1)  : 2300;
p16_7  = eqtype(eq1)  : 2346;
p16_8  = eqtype(eq1)  : 2392;
p16_9  = eqtype(eq1)  : 2438;
p16_10 = eqtype(eq1)  : 2484;
p16_11 = eqtype(eq1)  : 2530;

p24_0  = eqtype(eq1)  : 2576; "internal reg 24"
p24_1  = eqtype(eq1)  : 2622;
p24_2  = eqtype(eq1)  : 2668;
p24_3  = eqtype(eq1)  : 2714;
p24_4  = eqtype(eq1)  : 2760;
p24_5  = eqtype(eq1)  : 2806;
p24_6  = eqtype(eq1)  : 2852;
p24_7  = eqtype(eq1)  : 2898;
p24_8  = eqtype(eq1)  : 2944;
p24_9  = eqtype(eq1)  : 2990;

p23_0  = eqtype(eq1)  : 3036; "internal reg 23"
p23_1  = eqtype(eq1)  : 3082;
p23_2  = eqtype(eq1)  : 3128;
p23_3  = eqtype(eq1)  : 3174;
p23_4  = eqtype(eq1)  : 3220;
p23_5  = eqtype(eq1)  : 3266;
p23_6  = eqtype(eq1)  : 3312;
p23_7  = eqtype(eq1)  : 3358;
p23_8  = eqtype(eq1)  : 3404;
p23_9  = eqtype(eq1)  : 3450;

p15_oe = eqtype(eq1)  : 3496; "output enable for 15"
p15_0  = eqtype(eq1)  : 3542;
p15_1  = eqtype(eq1)  : 3588;
p15_2  = eqtype(eq1)  : 3634;
p15_3  = eqtype(eq1)  : 3680;
p15_4  = eqtype(eq1)  : 3726;
p15_5  = eqtype(eq1)  : 3772;
p15_6  = eqtype(eq1)  : 3818;
p15_7  = eqtype(eq1)  : 3864;
p15_8  = eqtype(eq1)  : 3910;
p15_9  = eqtype(eq1)  : 3956;
p15_10 = eqtype(eq1)  : 4002;
p15_11 = eqtype(eq1)  : 4048;

p22_0  = eqtype(eq1)  : 4094; "internal reg 22"
p22_1  = eqtype(eq1)  : 4140;
p22_2  = eqtype(eq1)  : 4186;
p22_3  = eqtype(eq1)  : 4232;
p22_4  = eqtype(eq1)  : 4278;
p22_5  = eqtype(eq1)  : 4324;
p22_6  = eqtype(eq1)  : 4370;
p22_7  = eqtype(eq1)  : 4416;

p14_oe = eqtype(eq1)  : 4462; "output enable for 14"
p14_0  = eqtype(eq1)  : 4508;
p14_1  = eqtype(eq1)  : 4554;
p14_2  = eqtype(eq1)  : 4600;
p14_3  = eqtype(eq1)  : 4646;
p14_4  = eqtype(eq1)  : 4692;
p14_5  = eqtype(eq1)  : 4738;
p14_6  = eqtype(eq1)  : 4784;
p14_7  = eqtype(eq1)  : 4830;

p21_0  = eqtype(eq1)  : 4876; "internal reg 21"
p21_1  = eqtype(eq1)  : 4922;
p21_2  = eqtype(eq1)  : 4968;
p21_3  = eqtype(eq1)  : 5014;
p21_4  = eqtype(eq1)  : 5050;
p21_5  = eqtype(eq1)  : 5106;

p13_oe = eqtype(eq1)  : 5152; "output enable for 13"
p13_0  = eqtype(eq1)  : 5198;
p13_1  = eqtype(eq1)  : 5244;
p13_2  = eqtype(eq1)  : 5290;
p13_3  = eqtype(eq1)  : 5336;
p13_4  = eqtype(eq1)  : 5382;
p13_5  = eqtype(eq1)  : 5428;
p13_6  = eqtype(eq1)  : 5474;
p13_7  = eqtype(eq1)  : 5520;
p13_8  = eqtype(eq1)  : 5566;
p13_9  = eqtype(eq1)  : 5612;

p12_oe = eqtype(eq1)  : 5658; "output enable for 12"
p12_0  = eqtype(eq1)  : 5704;
p12_1  = eqtype(eq1)  : 5750;
p12_2  = eqtype(eq1)  : 5796;
p12_3  = eqtype(eq1)  : 5842;
p12_4  = eqtype(eq1)  : 5888;
p12_5  = eqtype(eq1)  : 5934;
p12_6  = eqtype(eq1)  : 5980;
p12_7  = eqtype(eq1)  : 6026;

pt_obs = eqtype(eq1) : 6072;
pt_sp = eqtype(eq1) : 6118;
pt_ar = eqtype(eq1) : 6164;

pt_ground = ^0;

or19 = @p19_0 + @p19_1 + @p19_2 + @p19_3 + @p19_4 + @p19_5 + @p19_6 + @p19_7;
or18 = @p18_0 + @p18_1 + @p18_2 + @p18_3 + @p18_4 + @p18_5 + @p18_6 + @p18_7
              + @p18_8 + @p18_9;
or17 = @p17_0 + @p17_1 + @p17_2 + @p17_3 + @p17_4 + @p17_5 + @p17_6 + @p17_7;
or16 = @p16_0 + @p16_1 + @p16_2 + @p16_3 + @p16_4 + @p16_5 + @p16_6 + @p16_7
              + @p16_8 + @p16_9 + @p16_10 + @p16_11;
or15 = @p15_0 + @p15_1 + @p15_2 + @p15_3 + @p15_4 + @p15_5 + @p15_6 + @p15_7
              + @p15_8 + @p15_9 + @p15_10 + @p15_11;
or14 = @p14_0 + @p14_1 + @p14_2 + @p14_3 + @p14_4 + @p14_5 + @p14_6 + @p14_7;
or13 = @p13_0 + @p13_1 + @p13_2 + @p13_3 + @p13_4 + @p13_5 + @p13_6 + @p13_7
              + @p13_8 + @p13_9;
or12 = @p12_0 + @p12_1 + @p12_2 + @p12_3 + @p12_4 + @p12_5 + @p12_6 + @p12_7;

or21 = @p21_0 + @p21_1 + @p21_2 + @p21_3 + @p21_4 + @p21_5;
or22 = @p22_0 + @p22_1 + @p22_2 + @p22_3 + @p22_4 + @p22_5 + @p22_6 + @p22_7;
or23 = @p23_0 + @p23_1 + @p23_2 + @p23_3 + @p23_4 + @p23_5 + @p23_6 + @p23_7
              + @p23_8 + @p23_9;
or24 = @p24_0 + @p24_1 + @p24_2 + @p24_3 + @p24_4 + @p24_5 + @p24_6 + @p24_7
              + @p24_8 + @p24_9;
or25 = @p25_0 + @p25_1 + @p25_2 + @p25_3 + @p25_4 + @p25_5 + @p25_6 + @p25_7;
or26 = @p26_0 + @p26_1 + @p26_2 + @p26_3 + @p26_4 + @p26_5;
end;

PIN
"
specify the pins and the vector values they can take.
Product terms are evaluated by using the @ symbol:
  observe = @pt_obs : 0 () : 1 (25.Q);
If observe PT is 0, then do nothing, else use Q output from pin 25.
If a [.] follows @, then evaluate the PT again.
"
begin
1 =
  begin
  val = \_clock;
  end;
2  =
  begin
  val = \_input;
  end;
3  =
  begin
  val = \_input;
  end;
4  =
  begin
  val = \_input;
  end;
5  =
  begin
  val = \_input;
  end;
6  =
  begin
  val = \_input;
  end;
7  =
  begin
  val = \_input;
  end;
8  =
  begin
  val = \_input;
  end;
9  =
  begin
  val = \_input;
  end;
10 =
  begin
  val = \_power;
  end;
11 =
  begin
  val = \_input;
  end;
12 =
  begin
  val = \_io;
  reset = @pt_ar; "common reset term used here"
  set = @pt_sp;
  preload = @pt_ground : 0 (1 : 0 () : 1 (12)) : 1 (12);
  clock = 1;
  FF_type = 0;
  storage_type = 0;
  enable = !6230 : 0 > 12 enable_high < ( @p12_oe)
                 : 1 > 12 enable_low  < (/@p12_oe);
  mem0_input  = @or12;
  mem_output  = 0;  "power-up reset, if not, put 1"
  out_element = !6231 : 0 > 12 active_low  <
                          (!6232 : 0 > 12 registered    < (/12.Q)
                                 : 1 > 12 combinatorial < (/@or12))
              : 1 > 12 active_high <
                          (!6232 : 0 > 12 registered    < ( 12.Q)
                                 : 1 > 12 combinatorial < ( @or12));
  end;
13 =
  begin
  val = \_io;
  observe = @pt_obs : 0 () : 1 (/21.Q);
  reset = @pt_ar;
  set = @pt_sp;
  preload = @pt_ground : 0 (1 : 0 () : 1 (13)) : 1 (13);
  clock = 1;
  FF_type = 0;
  storage_type = 0;
  enable = !6226 : 0 > 13 enable_high < (@p13_oe)
                 : 1 > 13 enable_Low  < (/@p13_oe);
  mem0_input  = @or13;
  mem_output  = 0;
  out_element = !6227 : 0 > 13 active_low <
                          (!6228 : 0 > 13 registered    < (/13.Q)
                                 : 1 > 13 combinatorial < (/@or13))
              : 1 > 13 active_high <
                          (!6228 : 0 > 13 registered    < ( 13.Q)
                                 : 1 > 13 combinatorial < ( @or13));
  end;
14 =
  begin
  val = \_io;
  observe = @pt_obs : 0 () : 1 (/22.Q);
  reset = @pt_ar;
  set = @pt_sp;
  preload = @pt_ground : 0 (1 : 0 () : 1 (14)) : 1 (14);
  clock = 1;
  FF_type = 0;
  storage_type = 0;
  enable = !6224 : 0 > 14 enable_high < (@p14_oe)
                 : 1 > 14 enable_low  < (/@p14_oe);
  mem0_input  = @or14;
  mem_output  = 0;
  out_element = !6225 : 0 > 14 active_low  < (/14.Q)
                      : 1 > 14 active_high < ( 14.Q);
  end;
15 =
  begin
  val = \_io;
  observe = @pt_obs : 0 () : 1 (/23.Q);
  reset = @pt_ar;
  set = @pt_sp;
  preload = @pt_ground : 0 (1 : 0 () : 1 (15)) : 1 (15);
  clock = 1;
  FF_type = 0;
  storage_type = 0;
  enable = !6222 : 0 > 15 enable_high < (@p15_oe)
                 : 1 > 15 enable_low  < (/@p15_oe);
  mem0_input  = @or15;
  mem_output  = 0;
  out_element = !6223 : 0 > 15 active_low  < (/15.Q)
                      : 1 > 15 active_high < ( 15.Q);
  end;
16 =
  begin
  val = \_io;
  observe = @pt_obs : 0 () : 1 (/24.Q);
  reset = @pt_ar;
  set = @pt_sp;
  preload = @pt_ground : 0 (1 : 0 () : 1 (16)) : 1 (16);
  clock = 1;
  FF_type = 0;
  storage_type = 0;
  enable = !6220 : 0 > 16 enable_high < (@p16_oe)
                 : 1 > 16 enable_low  < (/@p16_oe);
  mem0_input  = @or16;
  mem_output  = 0;
  out_element = !6221 : 0 > 16 active_low  < (/16.Q)
                      : 1 > 16 active_high < ( 16.Q);
  end;
17 =
  begin
  val = \_io;
  observe = @pt_obs : 0 () : 1 (/25.Q);
  reset = @pt_ar;
  set = @pt_sp;
  preload = @pt_ground : 0 (1 : 0 () : 1 (17)) : 1 (17);
  clock = 1;
  FF_type = 0;
  storage_type = 0;
  enable = !6218 : 0 > 17 enable_high < (@p17_oe)
                 : 1 > 17 enable_low  < (/@p17_oe);
  mem0_input  = @or17;
  mem_output  = 0;
  out_element = !6219 : 0 > 17 active_low  < (/17.Q)
                      : 1 > 17 active_high < ( 17.Q);
  end;
18 =
  begin
  val = \_io;
  observe = @pt_obs : 0 () : 1 (/26.Q);
  reset = @pt_ar;
  set = @pt_sp;
  preload = @pt_ground : 0 (1 : 0 () : 1 (18)) : 1 (18);
  clock = 1;
  FF_type = 0;
  storage_type = 0;
  enable = !6214 : 0 > 18 enable_high < (@p18_oe)
                 : 1 > 18 enable_low  < (/@p18_oe);
  mem0_input  = @or18;
  mem_output  = 0;
  out_element = !6215 : 0 > 18 active_low  <
                          (!6216 : 0 > 18 registered    < (/18.Q)
                                 : 1 > 18 combinatorial < (/@or18))
              : 1 > 18 active_high <
                          (!6216 : 0 > 18 registered    < ( 18.Q)
                                 : 1 > 18 combinatorial < ( @or18));
  end;
19 =
  begin
  val = \_io;
  reset = @pt_ar;
  set = @pt_sp;
  preload = @pt_ground : 0 (1 : 0 () : 1 (19)) : 1 (19);
  clock = 1;
  FF_type = 0;
  storage_type = 0;
  enable = !6210 : 0 > 19 enable_high < (@p19_oe)
                 : 1 > 19 enable_low  < (/@p19_oe);
  mem0_input  = @or19;
  mem_output  = 0;
  out_element = !6211 : 0 > 19 active_low <
                          (!6212 : 0 > 19 registered    < (/19.Q)
                                 : 1 > 19 combinatorial < (/@or19))
              : 1 > 19 active_high <
                          (!6212 : 0 > 19 registered    < ( 19.Q)
                                 : 1 > 19 combinatorial < ( @or19));
  end;
20 =
  begin
  val = \_power;
  end;
21 =  "21 to 26 are internal registers"
  begin
  val = \_output;
  reset = @pt_ar;
  set = @pt_sp;
  preload = @pt_ground : 0 (1 : 0 (3) : 1 ()) : 1 (13);
  clock = 1;
  FF_type = 0;
  storage_type = 0;
  enable = ^1;  "always enabled"
  mem0_input  = @or21 > 21 active_low <;
  mem_output  = 0;
  out_element = /21.Q;
  end;
22 =
  begin
  val = \_output;
  reset = @pt_ar;
  set = @pt_sp;
  preload = @pt_ground : 0 (1 : 0 (4) : 1 ()) : 1 (14);
  clock = 1;
  FF_type = 0;
  storage_type = 0;
  enable = ^1;
  mem0_input  = @or22 > 22 active_low <;
  mem_output  = 0;
  out_element = /22.Q;
  end;
23 =
  begin
  val = \_output;
  reset = @pt_ar;
  set = @pt_sp;
  preload = @pt_ground : 0 (1 : 0 (5) : 2 ()) : 1 (15);
  clock = 1;
  FF_type = 0;
  storage_type = 0;
  enable = ^1;
  mem0_input  = @or23 > 23 active_low <;
  mem_output  = 0;
  out_element = /23.Q;
  end;
24 =
  begin
  val = \_output;
  reset = @pt_ar;
  set = @pt_sp;
  preload = @pt_ground : 0 (1 : 0 (6) : 2 ()) : 1 (16);
  clock = 1;
  FF_type = 0;
  storage_type = 0;
  enable = ^1;
  mem0_input  = @or24 > 24 active_low <;
  mem_output  = 0;
  out_element = /24.Q;
  end;
25 =
  begin
  val = \_output;
  reset = @pt_ar;
  set = @pt_sp;
  preload = @pt_ground : 0 (1 : 0 (7) : 2 ()) : 1 (17);
  clock = 1;
  FF_type = 0;
  storage_type = 0;
  enable = ^1;
  mem0_input  = @or25 > 25 active_low <;
  mem_output  = 0;
  out_element = /25.Q;
  end;
26 =
  begin
  val = \_output;
  reset = @pt_ar;
  set = @pt_sp;
  preload = @pt_ground : 0 (1 : 0 (8) : 2 ()) : 1 (18);
  clock = 1;
  FF_type = 0;
  storage_type = 0;
  enable = ^1;
  mem0_input  = @or26 > 26 active_low <;
  mem_output  = 0;
  out_element = /26.Q;
  end;
end; "PIN"
END_DEF
